plugins {
    id 'java'
    id "idea"
    id "org.jetbrains.kotlin.jvm" version "1.9.0-Beta"
    id "com.github.johnrengelman.shadow" version "6.1.0"
    id "com.gorylenko.gradle-git-properties" version "2.4.1"
    id "net.minecraftforge.gradle.forge"
    id "org.spongepowered.mixin"
}

group = 'org.cubewhy.lunarcn'
version = '1.5-build6-pre3-SNAPSHOT'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println("Give us stars -> https://github.com/CubeWhy/LiquidLunar")

compileJava.options.encoding = "UTF-8"

configurations {
    include
    implementation.extendsFrom(include)
}

repositories {
    maven { url = "https://repo.spongepowered.org/repository/maven-public/" }
    maven { url = "https://jitpack.io/" }
    mavenCentral()
}

dependencies {
    compileOnly 'org.projectlombok:lombok:1.18.28'
    annotationProcessor 'org.projectlombok:lombok:1.18.28'

    include fileTree(dir: "lib", includes: ['*.jar']) // local lib

    // Don't update mixin
    include("org.spongepowered:mixin:0.7.11-SNAPSHOT") {
        transitive = false
        exclude module: "guava"
        exclude module: "commons-io"
        exclude module: "gson"
        exclude module: "launchwrapper"
        exclude module: "log4j-core"
        exclude module: "slf4j-api"
    }

    annotationProcessor("org.spongepowered:mixin:0.7.11-SNAPSHOT")

    include "org.jetbrains.kotlin:kotlin-stdlib"
    include 'com.squareup.okhttp3:okhttp:4.11.0'
    include('com.jagrosh:DiscordIPC:0.4') {
        exclude module: "gson"
        exclude module: "log4j"
        exclude module: "json"
    }

    implementation 'org.jetbrains:annotations:24.0.1'
}

shadowJar {
    archiveClassifier.set("fatjar")
    configurations = [project.configurations.include]
    duplicatesStrategy DuplicatesStrategy.EXCLUDE

    exclude "native-binaries/**"

    exclude "LICENSE.txt"

    exclude "META-INF/maven/**"
    exclude "META-INF/versions/**"

    exclude "org/junit/**"
}


minecraft {
    version = "1.8.9-11.15.1.2318-1.8.9"
    runDir = "run"
    mappings = "stable_22"
    makeObfSourceJar = false
    clientJvmArgs += ["-Dfml.coreMods.load=org.cubewhy.lunarcn.injection.forge.TransformerLoader", "-Xmx4096m -Xms4096m", "-Ddev-mode"]
}

jar {
    manifestContentCharset 'utf-8'
    metadataCharset 'utf-8'
    manifest.attributes(
            "FMLCorePlugin": "org.cubewhy.lunarcn.injection.forge.TransformerLoader",
            "FMLCorePluginContainsFMLMod": true,
            "ForceLoadAsMod": true,
            "MixinConfigs": "mixins.lunarcn.json",
            "ModSide": "CLIENT",
            "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
            "TweakOrder": "0",
            "FMLAT": "lunarcn_at.cfg",
    )
}

mixin {
    defaultObfuscationEnv searge
    add sourceSets.main, "mixins.lunarcn.refmap.json"
}

reobf {
    shadowJar {
        mappingType = "SEARGE"
    }
}

processResources {
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    filesMatching("mcmod.info") {
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    rename "(.+_at.cfg)", "META-INF/\$1"
}

tasks.register('moveResources') {
    doLast {
        ant.move file: "${buildDir}/resources/main",
                todir: "${buildDir}/classes/java"
    }
}

moveResources.dependsOn(processResources)
classes.dependsOn(moveResources)
